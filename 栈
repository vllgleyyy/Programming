
    【栈】

//用数组实现一个顺序栈
//创建
#define MAXSIZE 100
typedef struct
{
SElemType *base;
SElemType *top;
int stacksize;
}SqStack;
Status InitStack(SqStack &S）
{
S.base=new SElemType[MAXSIZE];
if(!S.base) exit(OVERFLOW);
S.top=S.base;
S.stacksize=MAXSIZE;
return OK;
}
//判断是否为空
bool StackEmpty(SqStack S)
{
if (S.top==S.base)
return ture;
else return false;
}
//入栈
Status Push(SqStack &S，SElemType e)
{
if(S.top-S.base==S.stacksize)return ERROR;
*S.top++=e;
return OK;
}
//出栈
Status Pop(SqStack &S，SElemType e)
{
if(S.top==S.base)return ERROR;
e=*--S.top;
return OK;
}
//取栈顶元素
SElemType GetTop(SqStack S)
{
if(S.top!=S.base)return *(S.top-1);
}
//用链表实现一个链式栈
typedef struct StackNode
{
ElemType data;
Struct StackNode *next;
}StackNode,*LinkStack;
Status InitStack(LinkStack &S）
{
S=NULL;
return OK;
}
//入栈
Status Push(LinkStack &S，SElemType e)
{
p=new StackNode;
p->data=e;
p->next=S;
S=p;
return OK;
}
//出栈
Status Pop(LinkStack &S，SElemType e)
{
if(S==NULL)return ERROR;
e=S->data;
p=S;
S=S->next;
delete p;
return OK;
}
//取栈顶元素
SElemType GetTop(LinkStack S)
{
if(S!=NULL)return S->data);
}

编程模拟实现一个浏览器的前进、后退功能
//利用顺序栈结构模拟浏览器的前进、后退功能。例如：依次查看A、B、C三个页面。
#define MAXSIZE 100
typedef struct
{
SElemType *base;
SElemType *top;
int stacksize;
}SqStack;
Status InitStack(SqStack &S）
{
S.base=new SElemType[MAXSIZE];
if(!S.base) exit(OVERFLOW);
S.top=S.base;
S.stacksize=MAXSIZE;
return OK;
}
//判断是否为空
bool StackEmpty(SqStack S)
{
if (S.top==S.base)
return ture;
else return false;
}
//入栈
Status Push(SqStack &S，SElemType e)
{
if(S.top-S.base==S.stacksize)return ERROR;
*S.top++=e;
return OK;
}
//出栈
Status Pop(SqStack &S，SElemType e)
{
if(S.top==S.base)return ERROR;
e=*--S.top;
return OK;
}
//取栈顶元素
SElemType GetTop(SqStack S)
{
if(S.top!=S.base)return *(S.top-1);
}
//依次查看A、B、C三个页面。
Stack<string> x=new Stack<string>();
Stack<string> y=new Stack<string>();
